import { useEffect, useState } from "react";
import type { PersonalData } from "../types/personal_data";
import { useAuth } from "../auth/useAuth";
import { api } from "../api/api";
import { settings } from "../config";
const dietOptions = [
    "wegetariańska",
    "wegańska",
    "niskowęglowodanowa",
    "keto",
    "standardowa",
];
const allergyOptions = ["orzechy", "laktoza", "gluten", "jaja", "ryby"];
const genderOptions = ["mężczyzna", "kobieta", "inne"];
const goalOptions = ["utrata masy", "utrzymanie", "przyrost masy"];

const UserProfile: React.FC = () => {
    const { user } = useAuth();
    const INITIAL: PersonalData = {
        user_id: 0,
        weight: null,
        height: null,
        age: null,
        activity_level: null,
        sillouette: null,
    };
    // Dane z modeli
    const [personalData, setPersonalData] = useState<PersonalData>(INITIAL);
    const [gender, setGender] = useState<string>("");
    const [dietType, setDietType] = useState<string[]>([]);
    const [allergies, setAllergies] = useState<string[]>([]);
    const [goal, setGoal] = useState<string>("");

    useEffect(() => {
        if (!user?.id) return;

        let alive = true;

        (async () => {
            try {
                const url = `${settings.API_BASE_URL}${settings.USERSDATA_BASE_ENDPOINT}${user.id}`;
                const data = await api.get<PersonalData>(url);

                if (!alive) return;

                setPersonalData(data);
            } catch (e) {
                if (!alive) return;
                console.error(e);
                setPersonalData((prev) => ({ ...prev, user_id: user.id }));
            }
        })();

        return () => {
            alive = false;
        };
    }, []);

    const setData = <K extends keyof PersonalData>(
        name: K,
        value: PersonalData[K],
    ) => {
        setPersonalData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const toNumOrNull = (v: string): number | null =>
        v.trim() === "" ? null : Number(v);

    const toggleSelection = (
        value: string,
        setList: (updater: (prev: string[]) => string[]) => void,
    ) => {
        setList((prev) =>
            prev.includes(value) ? prev.filter((x) => x !== value) : [...prev, value],
        );
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        const data = {
            personalData,
            gender,
            dietType,
            allergies,
            goal,
        };
        console.log("Wysłane dane użytkownika:", data);
        // TODO: fetch/axios PUT/POST tutaj
    };

    return (
        <form onSubmit={handleSubmit} className="max-w-2xl mx-auto p-6 space-y-6">
            <h2 className="text-2xl font-bold">Ustawienia użytkownika</h2>

            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div>
                    <label className="block font-medium mb-1">Wiek</label>
                    <input
                        type="number"
                        value={personalData.age ?? ""}
                        onChange={(e) => setData("age", toNumOrNull(e.target.value))}
                        className="w-full border px-3 py-2 rounded"
                    />
                </div>

                <div>
                    <label className="block font-medium mb-1">Wzrost (cm)</label>
                    <input
                        type="number"
                        value={personalData.height ?? ""}
                        onChange={(e) => setData("height", toNumOrNull(e.target.value))}
                        className="w-full border px-3 py-2 rounded"
                    />
                </div>

                <div>
                    <label className="block font-medium mb-1">Waga (kg)</label>
                    <input
                        type="number"
                        value={personalData.weight ?? ""}
                        onChange={(e) => setData("weight", toNumOrNull(e.target.value))}
                        className="w-full border px-3 py-2 rounded"
                    />
                </div>
            </div>

            <div>
                <label className="block font-medium mb-1">Płeć</label>
                <select
                    value={gender}
                    onChange={(e) => setGender(e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                >
                    <option value="">-- Wybierz --</option>
                    {genderOptions.map((g) => (
                        <option key={g} value={g}>
                            {g}
                        </option>
                    ))}
                </select>
            </div>

            <div>
                <label className="block font-medium mb-1">
                    Preferencje dietetyczne
                </label>
                <div className="flex flex-wrap gap-2">
                    {dietOptions.map((option) => (
                        <button
                            type="button"
                            key={option}
                            onClick={() => toggleSelection(option, setDietType)}
                            className={`px-3 py-1 rounded-full text-sm border ${dietType.includes(option)
                                    ? "bg-green-500 text-white"
                                    : "bg-gray-100 text-gray-800"
                                }`}
                        >
                            {option}
                        </button>
                    ))}
                </div>
            </div>

            <div>
                <label className="block font-medium mb-1">Alergie</label>
                <div className="flex flex-wrap gap-2">
                    {allergyOptions.map((option) => (
                        <button
                            type="button"
                            key={option}
                            onClick={() => toggleSelection(option, setAllergies)}
                            className={`px-3 py-1 rounded-full text-sm border ${allergies.includes(option)
                                    ? "bg-red-500 text-white"
                                    : "bg-gray-100 text-gray-800"
                                }`}
                        >
                            {option}
                        </button>
                    ))}
                </div>
            </div>

            <div>
                <label className="block font-medium mb-1">Cel</label>
                <select
                    value={goal}
                    onChange={(e) => setGoal(e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                >
                    <option value="">-- Wybierz --</option>
                    {goalOptions.map((g) => (
                        <option key={g} value={g}>
                            {g}
                        </option>
                    ))}
                </select>
            </div>

            <div>
                <button
                    type="submit"
                    className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded"
                >
                    Zapisz ustawienia
                </button>
            </div>
        </form>
    );
};

export default UserProfile;
